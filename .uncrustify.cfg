#
# based on uncrustify config file for the linux kernel
#

code_width               = 80
indent_case_brace        = 4
indent_columns           = 4
indent_label             = 2         # pos: absolute col, neg: relative column
indent_with_tabs         = 0

#
# inter-symbol newlines
#
nl_brace_else            = remove    # "} else" vs "} \n else" - cuddle else
nl_brace_while           = remove    # "} while" vs "} \n while" - cuddle while
nl_do_brace              = remove    # "do {" vs "do \n {"
nl_else_brace            = remove    # "else {" vs "else \n {"
nl_enum_brace            = remove    # "enum {" vs "enum \n {"
nl_fcall_brace           = remove    # "list_for_each() {" vs "list_for_each()\n{"
nl_fdef_brace            = force     # "int foo() {" vs "int foo()\n{"
nl_for_brace             = remove    # "for () {" vs "for () \n {"
nl_func_var_def_blk      = 0         # don't add newlines after a block of var declarations
nl_if_brace              = remove    # "if () {" vs "if () \n {"
nl_multi_line_define     = true
nl_struct_brace          = remove    # "struct {" vs "struct \n {"
nl_switch_brace          = remove    # "switch () {" vs "switch () \n {"
nl_union_brace           = remove    # "union {" vs "union \n {"
nl_while_brace           = remove    # "while () {" vs "while () \n {"


#
# Source code modifications
#
mod_full_brace_do        = force     # "do a--; while ();" vs "do { a--; } while ();"
mod_full_brace_for       = force     # "for () a--;" vs "for () { a--; }"
mod_full_brace_if        = force     # "if (a) a--;" vs "if (a) { a--; }"
mod_full_brace_nl        = 3         # don't remove if more than 3 newlines
mod_full_brace_while     = force     # "while (a) a--;" vs "while (a) { a--; }"
mod_paren_on_return      = remove    # "return 1;" vs "return (1);"


#
# inter-character spacing options
#
sp_after_cast            = remove    # "(int) a" vs "(int)a"
sp_after_comma           = force
sp_after_sparen          = force     # "if () {" vs "if (){"
sp_arith                 = force
sp_assign                = force
sp_assign                = force
sp_before_comma          = remove
sp_before_ptr_star       = force     # "char *foo" vs "char* foo
sp_before_sparen         = force     # "if (" vs "if("
sp_between_ptr_star      = remove    # "char * *foo" vs "char **foo"
sp_bool                  = force
sp_compare               = force
sp_func_call_paren       = remove    # "foo (" vs "foo("
sp_func_def_paren        = remove    # "int foo (){" vs "int foo(){"
sp_func_proto_paren      = remove    # "int foo ();" vs "int foo();"
sp_inside_braces         = force     # "{ 1 }" vs "{1}"
sp_inside_braces_enum    = force     # "{ 1 }" vs "{1}"
sp_inside_braces_struct  = force     # "{ 1 }" vs "{1}"
sp_inside_sparen         = remove
sp_paren_brace           = force
sp_sizeof_paren          = remove    # "sizeof (int)" vs "sizeof(int)"

#
# Aligning stuff
#
align_enum_equ_span      = 4         # '=' in enum definition
align_nl_cont            = true
align_on_tabstop         = FALSE     # align on tabstops
align_right_cmt_span     = 3
align_struct_init_span   = 1
align_struct_init_span   = 3         # align stuff in a structure init '= { }'
align_var_def_star_style = 2         # void  *foo;
align_var_struct_span    = 0
align_with_tabs          = FALSE     # use tabs to align
